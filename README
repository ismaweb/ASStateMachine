ASStateMachine is a hirerarchical finite state machine written in Action Script 3.

A complete example in 2 files Main.as and ExampleSM.as that shows how to control a socket connection process whith machine state.

Main.as:

package 
{
	import flash.display.Sprite;
	import flash.events.Event;
	
	import asstatemachine.StateMachineSignal;
	import asstatemachine.StateMachineEvent;
	
	import ExampleSM;
	
	public class Main extends Sprite 
	{
		private var sm:ExampleSM;
		
		public function Main():void 
		{
			if (stage) init();
			else addEventListener(Event.ADDED_TO_STAGE, init);
		}
		
		private function init(e:Event = null):void 
		{
			removeEventListener(Event.ADDED_TO_STAGE, init);
			
			sm = new ExampleSM("your_machine");
			
			sm.addSocketTryConnectHandler(tryConnect);
			
			//many times signals don't need special handling other than 
			//the state logic defined inside the state machine
			//sm.addConnectedHandler();
			//sm.addDisconnectedHandler();
			//sm.addSocketFailHandler();
			//sm.addIOErrorHandler();
			
			
			sm.addConnectingListener(onConnecting);
			sm.addConnectedListener(onConnected);
			sm.addDisconnectedListener(onDisconnected);
			
			// tells the machine to lock configuration and put it on the first state
			sm.init();
			
			sm.socketTryConnect({url:"www.example.org",port:1234});
		}
		
		private function tryConnect(sig:StateMachineSignal):void
		{
			//sig.args <- arguments
			
			//launch the socket connection attempt
			// socket connection success will launch asyncronously sm.socketConnected
			// socket connection fail will launch asyncronously sm.socketFail
			// socket io error will launch asyncronously sm.socketIOError
			// socket disconnection will launch asyncronously sm.socketDisconnected
		}
		
		private function onConnecting(sig:StateMachineEvent):void
		{
			trace("Connecting..."); 
		}
		
		private function onConnected(e:StateMachineEvent):void 
		{ 
			trace("Connected!"); 
		}
		
		private function onDisconnected(e:StateMachineEvent):void
		{
			trace("Now is disconnected");
		}
		
		
		
		
	}
	
}

ExampleSM.as:

package
{
	import asstatemachine.StateMachine;
	import asstatemachine.DOStateCreator;
	import asstatemachine.StateMachineSignal;
	
	
	public class ExampleSM extends StateMachine
	{
		private const SIG_SOCKET_TRY_CONNECT:String = "socket_try";
		private const SIG_SOCKET_CONNECTED:String = "socket_connected";
		private const SIG_SOCKET_FAIL:String = "socket_fail";
		private const SIG_SOCKET_DISCONNECTED:String = "socket_disconnected";
		private const SIG_SOCKET_IO_ERROR:String = "socket_io_error";
		
		
		public function ExampleSM(name:String) 
		{
			var childs:Array = [
				{name:"disconnected", initial:true, allow:[SIG_SOCKET_TRY_CONNECT] },
				{name:"connecting", from:["disconnected"], allow:[SIG_SOCKET_CONNECTED, SIG_SOCKET_FAIL] },
				{name:"connected", from:["connecting"], allow:[SIG_SOCKET_DISCONNECTED, SIG_SOCKET_IO_ERROR], children:[
					{name:"no_room", initial:true, from:["owning_room", "joining_room", "listing_rooms", "exiting_room"] },
					{name:"owning_room", from:["no_room"] },
					{name:"own_room", from:["owning_room"] },
					{name:"listing_rooms", from:["no_room"] },
					{name:"joining_room", from:["no_room"] },
					{name:"join_room", from:["joining_room"] },
					{name:"exiting_room", from:["join_room","own_room"] }
				]}
			];
			
			// create from a Dynamic Object array
			super(name, DOStateCreator.fromDO(childs));
			
		}
		
		//signal state logic
		public function socketTryConnect(args:Object):void
		{ 
			if(go(s.connecting))
				signal(SIG_SOCKET_TRY_CONNECT, args);
		}
		
		//signal state logic
		public function socketConnected(args:Object):void
		{ 
			if(go(s.connected))
				signal(SIG_SOCKET_CONNECTED , args);
		}
		
		//signal state logic
		public function socketFail(args:Object):void
		{ 
			if(go(s.disconnected))
				signal(SIG_SOCKET_FAIL, args); 
		}
		
		//signal state logic
		public function socketIOError(args:Object):void
		{
			if(go(s.disconnected))
				signal(SIG_SOCKET_IO_ERROR , args);
		}
		
		//signal state logic
		public function socketDisconnected(args:Object):void
		{ 
			if(go(s.disconnected))
				signal(SIG_SOCKET_DISCONNECTED , args); 
		}
		
		// map signal handlig
		public function addSocketTryConnectHandler(handler:Function):void { addSignalHandler(SIG_SOCKET_TRY_CONNECT, handler); }
		public function addConnectedHandler(handler:Function):void { addSignalHandler(SIG_SOCKET_CONNECTED, handler); }
		public function addSocketFailHandler(handler:Function):void { addSignalHandler(SIG_SOCKET_FAIL, handler); }
		public function addIOErrorHandler(handler:Function):void { addSignalHandler(SIG_SOCKET_IO_ERROR, handler); }
		public function addDisconnectedHandler(handler:Function):void { addSignalHandler(SIG_SOCKET_DISCONNECTED, handler); }
		
		// map output events (state change events) into listeners
		public function addDisconnectedListener(listener:Function):void { s.disconnected.listenEnter(listener); }
		public function addConnectedListener(listener:Function):void { s.connected.listenEnter(listener); }
		public function addConnectingListener(listener:Function):void { s.connecting.listenEnter(listener); }
		
	}

}


